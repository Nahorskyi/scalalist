[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/max/scalalab1list/scalalist/src/main/scala/Main.scala","languageId":"scala","version":1,"text":"import scala.annotation.tailrec\nimport scala.collection.mutable\n\nimport List._\nimport List.*\n\nenum List[+A]:\n  case Nil\n  case Cons(hd: A, tl: List[A])\n  \n  def foldLeft[B](x: B)(f: (B, A) => B): B = {\n    def inner(xs: List[A], acc: B): B = xs match {\n      case Nil => acc\n      case Cons(xh, xt) => inner(xt, f(acc, xh))\n    }\n    inner(this, x)\n  }\n\n  def foldRight[B](x: B)(f: (A, B) => B): B = {\n    this match {\n      case Nil => x\n      case Cons(xh, xt) => f(xh, xt.foldRight(x)(f))\n    }\n  }\n  def isEmpty: Boolean =\n    this match {\n      case Nil        => true\n      case Cons(_, _) => false\n  }\n\n  def take(n: Int): List[A] ={\n    def f[A](xs: List[A], n: Int, acc: List[A] = Nil): List[A] = {\n      xs match {\n        case Nil => acc\n        case Cons(xh, xt) => {\n          if (n <= 0) acc \n          else \n            Cons(xh, f(xt,n-1,acc))\n        }\n      }\n    }\n    f(this, n)\n  }\n\n  override def toString: String = {\n    def go(sb: StringBuilder, xs: List[A]): String =\n      {\n        xs match\n          case Nil => sb.append(\"]\").result\n          case Cons(xh,xt) => \n            go(sb.append(xh).append(if xt == Nil then \"\" else \", \"),xt)\n      }\n    go(new StringBuilder(\"[\"),this)\n  }\n\n\nobject List:\n  def empty[A]: List[A] = Nil\n  def apply[A](xs: A*): List[A] = of(xs*)\n  def of[A](xs: A*): List[A] = xs.foldRight(Nil: List[A]) { case (x, acc) => Cons(x, acc) }\n  \n  def drop[A](xs: List[A], n: Int): List[A] ={\n    if (n == 0) xs\n    else xs match {\n      case Nil => Nil\n      case Cons(_, xt) => drop(xt, n - 1)\n    }\n  }\n\n  def forall[A](xs: List[A], p: A => Boolean): Boolean = {\n    if (xs.isEmpty) true\n    else xs match {\n      case Nil => xs==Nil\n      case Cons(xh, xt) =>\n        if (p(xh))\n          forall(xt, p) && true\n        else\n          false\n    }\n  }\n\n@main def main(): Unit = {\n\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, shutdown, [true,null])[0m
[0m[[0m[0minfo[0m] [0m[0mshutting down sbt server[0m
